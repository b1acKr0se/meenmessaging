package io.wyrmise.meen;


import android.content.Context;
import android.content.SharedPreferences;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Typeface;
import android.graphics.drawable.Drawable;
import android.util.SparseBooleanArray;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.ImageView;
import android.widget.TextView;

import java.text.Normalizer;
import java.text.Normalizer.Form;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Random;

/**
 * @author wyrmise
 * @overview Custom Adapter using Message with modified getView() and add method
 * @attributes ctx Context messageListArray ArrayList<Message>
 */
public class MessageAdapter extends ArrayAdapter<Message> {
    static HashMap<String, Integer> avatarID = new HashMap<String, Integer>();
    static HashMap<String, Integer> randomID = new HashMap<String, Integer>();
    public ArrayList<Message> messageListArray;
    Holder holder;
    private Context ctx;
    private SparseBooleanArray mSelectedItemsIds;
    /**
     * @param context
     * @param textViewResourceId
     * @param messageListArray
     * @overview constructor method inherited from ArrayAdapter
     */
    public MessageAdapter(Context context, int textViewResourceId,
                          ArrayList<Message> messageListArray) {
        super(context, textViewResourceId);
        mSelectedItemsIds = new SparseBooleanArray();
        this.messageListArray = messageListArray;
        this.ctx = context;
    }

    public static String removeDiacriticalMarks(String string) {
        return Normalizer.normalize(string, Form.NFD)
                .replaceAll("\\p{InCombiningDiacriticalMarks}+", "");
    }

    @Override
    public int getViewTypeCount() {
        if (getCount() != 0)
            return getCount();
        return 1;
    }

    /**
     * @effect get the View generated by the current instance of MessageAdapter
     */
    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        View convertView1 = convertView;
        LayoutInflater vi = (LayoutInflater) ctx
                .getSystemService(Context.LAYOUT_INFLATER_SERVICE);

        if (convertView1 == null) {
            holder = new Holder();
            convertView1 = vi.inflate(R.layout.list_view_main, parent,
                    false);
            holder.messageTo = (TextView) convertView1
                    .findViewById(R.id.address);
            holder.messageContent = (TextView) convertView1
                    .findViewById(R.id.previewMsg);
            holder.date = (TextView) convertView1.findViewById(R.id.showDate);
            holder.imgView = (ImageView) convertView1
                    .findViewById(R.id.quickBadge);
            holder.readStatus = (ImageView) convertView1.findViewById(R.id.readStatus);

            convertView1.setTag(holder);
        } else {
            holder = (Holder) convertView1.getTag();
        }

        SharedPreferences.Editor editor = ctx.getSharedPreferences("colors", ctx.MODE_PRIVATE).edit();
        Message message = getItem(position);
        if (!MainActivity.contactPictureID.containsKey(message.messageNumber)) {
            if (!avatarID.containsKey(message.messageNumber)) {
                ArrayList<Integer> a = getPicture(message);
                int id = a.get(1);
                if (id != 0) {
                    holder.imgView.setImageResource(id);
                    avatarID.put(message.messageNumber, id);
                    randomID.put(message.messageNumber, a.get(0));
                    editor.putInt(message.messageNumber, a.get(0));
                }
            } else {
                int id = avatarID.get(message.messageNumber);
                holder.imgView.setImageResource(id);
            }
        } else
            holder.imgView.setImageDrawable(MainActivity.contactPictureID.get(message.messageNumber));

        holder.messageTo.setText(message.messageNumber);
        holder.messageContent.setText(message.messageContent);
        holder.date.setText(message.messageDate);

        if (MainActivity.fontCode == 2) {
            holder.messageTo.setTypeface(holder.bold);
            holder.messageContent.setTypeface(holder.face);
            holder.date.setTypeface(holder.face);
        } else if (MainActivity.fontCode == 1) {
            holder.messageTo.setTypeface(null);
            holder.messageContent.setTypeface(null);
            holder.date.setTypeface(null);
        }

        if (message.readState == 0) {
            holder.readStatus.setVisibility(ImageView.VISIBLE);
        } else {
            holder.readStatus.setVisibility(ImageView.GONE);
        }

        if (MainActivity.isNightMode) {
            holder.messageTo.setTextColor(convertView1.getResources().getColor(R.color.white));
            holder.messageContent.setTextColor(convertView1.getResources().getColor(R.color.white));
            holder.date.setTextColor(convertView1.getResources().getColor(R.color.gray));
        } else {
            if (!MainActivity.hasBackground) {
                holder.messageTo.setTextColor(convertView1.getResources().getColor(R.color.black));
                holder.messageContent.setTextColor(convertView1.getResources().getColor(R.color.black));
                holder.date.setTextColor(convertView1.getResources().getColor(R.color.black));
            } else {
                holder.messageTo.setTextColor(convertView1.getResources().getColor(R.color.white));
                holder.messageContent.setTextColor(convertView1.getResources().getColor(R.color.white));
                holder.date.setTextColor(convertView1.getResources().getColor(R.color.gray));
            }
        }
        editor.commit();
        return convertView1;
    }

    /**
     * @effects returns the size of the array of adapter
     */
    @Override
    public int getCount() {
        return messageListArray.size();
    }

    /**
     * @effects returns the item at specific position
     */
    @Override
    public Message getItem(int position) {
        return messageListArray.get(position);
    }

    /**
     * @param messageList
     * @effects set the given list as the default list of the adapter
     */
    public void setArrayList(ArrayList<Message> messageList) {
        this.messageListArray = messageList;
        notifyDataSetChanged();
    }

    /**
     * @param msg
     * @effects iterate through the current list to find and remove older entry
     * add new entry to the first position notify data changed
     */
    public void addItem(Message msg) {
        Iterator<Message> iter = messageListArray.iterator();
        while (iter.hasNext()) {
            Message message = (Message) iter.next();
            if (message.messageNumber.equals(msg.messageNumber))
                iter.remove();
        }
        this.messageListArray.add(0, msg);
        notifyDataSetChanged();
    }

    public Drawable getContactPicture(Message message) {
        String actualPhoneNum = ThreadActivity.getPhoneNumber(message.messageNumber, ctx);
        if (actualPhoneNum != null) {
            Bitmap bm = MainActivity.getPhoto(ctx, actualPhoneNum);
            if (bm != null) {
                Resources res = ctx.getResources();
                Drawable pic = MainActivity.getRoundedBitmap(res, bm);
                return pic;
            }
        }
        return null;
    }

    public ArrayList<Integer> getPicture(Message msg) {
        if (!msg.messageNumber.substring(0, 1).matches("[0-9]")
                && !msg.messageNumber.startsWith("+")) {
            Random rand = new Random();
            int random = rand.nextInt(3);
            String first = msg.messageNumber.substring(0, 1)
                    .toLowerCase();
            if (first.equals("Ä‘"))
                first = "d";
            String firstLetter = removeDiacriticalMarks(first);
            String fileName = "letters_" + firstLetter + "_" + random;
            int id = ctx.getResources().getIdentifier(fileName, "drawable",
                    ctx.getPackageName());
            ArrayList<Integer> a = new ArrayList<Integer>();
            a.add(random);
            a.add(id);
            return a;
        } else {
            Random rand = new Random();
            int random = rand.nextInt(3);
            String fileName = "default_" + random;
            int id = ctx.getResources().getIdentifier(fileName, "drawable",
                    ctx.getPackageName());
            ArrayList<Integer> a = new ArrayList<Integer>();
            a.add(random);
            a.add(id);
            return a;
        }
    }

    public void toggleSelection(int position) {
        selectView(position, !mSelectedItemsIds.get(position));
    }

    public void removeSelection() {
        mSelectedItemsIds = new SparseBooleanArray();
        notifyDataSetChanged();
    }

    public void selectView(int position, boolean value) {
        if (value)
            mSelectedItemsIds.put(position, value);
        else
            mSelectedItemsIds.delete(position);
        notifyDataSetChanged();
    }

    public int getSelectedCount() {
        return mSelectedItemsIds.size();
    }

    public SparseBooleanArray getSelectedIds() {
        return mSelectedItemsIds;
    }


    /**
     * @author wyrmise
     * @overview class to hold the references of the TextViews used in ListView
     */
    private class Holder {
        public TextView messageTo, messageContent, date;
        public ImageView imgView, readStatus;
        public Typeface face, bold;
    }

}
